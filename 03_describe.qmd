---
title: "03_describe"
format: html
editor: visual
---

We are representing the first 10 samples from our data to see what our table looks like:

```{r}
library(tidyverse)

meta_data2 <- data.frame(ID = 1:40) |> 
  #Adding pre/post treatment to the dataset
  mutate(Treatment = case_when(str_ends(ID,"[13579]") ~ "pre_treatment",
                               str_ends(ID,"[^13579]") ~ "post_treatment")) |>
  # Adding corresponding Person ID
  mutate(subject_ID = case_when(Treatment == "pre_treatment" ~ (ID+1)/2,
                         Treatment == "post_treatment" ~ ID/2)) |> 
  mutate(subject_ID = case_when(subject_ID < 10 ~ str_c("subject_0", subject_ID),
                                   subject_ID >= 10 ~ str_c("subject_", subject_ID))) |> 
  #Adding pCR status
  mutate(pCR_status = case_when(ID <= 12 ~ "pCR",
                                ID > 12 ~ "no_pCR"))
  
write_csv(x = meta_data2,
          file = "data/meta_data2.csv")
  
```

```{r, fig.height=7, fig.width=8}
meta_data2 |>
  ggplot(aes(x = pCR_status, y = ID,  color = subject_ID))+
  #scale_color_discrete(guide = FALSE)+
  scale_y_continuous(breaks = 1:40) +
  geom_hline(yintercept = 0)+
  geom_point(aes(shape = Treatment))+
  theme_minimal(base_size = 10)+
  theme(plot.margin = unit(
    c(1, 0.5, 0.5, 1), "cm"),
    panel.grid.major.x = element_blank(),# set tthe margins, top, left,... in cms in order
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_line(size =1))+
  labs(x ="pCR Status", y ="Samples", title ="Samples per pCR status by treatment and patient", legend ="number of patient")
```

```{r}


```

```{r}
full_expression_data |>
  group_by(Sample) |>
  summarise(av=mean(Count))|>
  mutate(Treatment = case_when(Sample %% 2 == 0  ~ "Post-treatment",
                         Sample %% 2 !=0 ~ "Pre-treatment"))
```

```{r, fig.height=6, fig.width=15}
library(patchwork)
p1 <- full_expression_data |>
  filter(pCR_status == "pCR" & subject_ID == "subject_01" C2out > 100 & Treatment == "pre_treatment" ) |>
  ggplot(aes(x = Gene , y = Count))+
  scale_y_continuous(breaks = seq(100, 29000, by = 2000))+
  geom_col()+
  theme_minimal(base_size = 10)+
  theme(plot.margin = unit(
    c(1, 0.5, 0.5, 1), "cm"),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),# set tthe margins, top, left,... in cms in order
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_line(size =1))+
  theme(axis.text.x = element_blank())+
  labs( x ="Genes", y ="Total Counts", title ="pCR, patient1, 100>Counts, pre")

p2 <- full_expression_data |>
  filter(pCR_status == "pCR" & subject_ID == "subject_01" & Count > 100 & Treatment == "post_treatment" ) |>
  ggplot(aes(x = Gene , y = Count))+
  scale_y_continuous(breaks = seq(100, 1500, by = 100))+
  geom_col()+
  theme_minimal(base_size = 10)+
  theme(plot.margin = unit(
    c(1, 0.5, 0.5, 1), "cm"),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),# set tthe margins, top, left,... in cms in order
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_line(size =1))+
  theme(axis.text.x = element_blank())+
  labs( x ="Genes", y ="Total Counts", title ="pCR, patient1, 100>Counts, post")



  
p1/p2


  
  
  
#  arrange(subject_ID)|>
 # select(subject_ID == "subject_01")

                             
```

```{r}
p3 <- full_expression_data |>
  filter(pCR_status == "no_pCR" & subject_ID == "subject_07" & Count > 500 & Treatment == "pre_treatment" ) |>
  ggplot(aes(x = Gene , y = Count))+
  scale_y_continuous(breaks = seq(100, 11000, by = 1000))+
  geom_col()+
  theme_minimal(base_size = 10)+
  theme(plot.margin = unit(
    c(1, 0.5, 0.5, 1), "cm"),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),# set tthe margins, top, left,... in cms in order
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_line(size =1))+
  theme(axis.text.x = element_blank())+
  labs( x ="Genes", y ="Total Counts", title ="no_pCR, patient7, 100>Counts, pre")

p4 <- full_expression_data |>
  filter(pCR_status == "no_pCR" & subject_ID == "subject_07" & Count > 500 & Treatment == "post_treatment" ) |>
  ggplot(aes(x = Gene , y = Count))+
  scale_y_continuous(breaks = seq(100, 18000, by = 1000))+
  geom_col()+
  theme_minimal(base_size = 10)+
  theme(plot.margin = unit(
    c(1, 0.5, 0.5, 1), "cm"),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),# set tthe margins, top, left,... in cms in order
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_line(size =1))+
  theme(axis.text.x = element_blank())+
  labs( x ="Genes", y ="Total Counts", title ="no_pCR, patient7, 100>Counts, post")

p3/p4
```

```{r, fig.height=6, fig.width=10}
full_expression_data |>
  group_by(Sample) |>
  summarise(av=mean(Count))|>
  mutate(Treatment = case_when(Sample %% 2 == 0  ~ "Post-treatment",
                         Sample %% 2 !=0 ~ "Pre-treatment")) |>
  ggplot(aes(x = Sample, y = av))+
  geom_hline(yintercept = 0)+
  scale_x_continuous(breaks = 1:40) +
  geom_col(aes(fill= Treatment))+
  theme_minimal(base_size = 12)+
  theme(plot.margin = unit(
    c(1, 0.5, 0.5, 1), "cm"),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),# set tthe margins, top, left,... in cms in order
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_line(size =1))+
  theme(axis.text.x = element_text(vjust = 7, hjust= 0.4))+
  labs(title ="The Average Total Count in Samples by Treatment", x ="Samples", y ="Average Counts", legend ="Treatment")

```

```{r}
full_expression_data |>
  group_by(Sample) |>
  summarise(av=mean(Count))|>
  mutate(Treatment = case_when(Sample %% 2 == 0  ~ "Post-treatment",
                         Sample %% 2 !=0 ~ "Pre-treatment"))
```

```{r}
group1<- full_expression_data|>
  filter(Count > 1000 & pCR_status == "pCR")

group2 <-  full_expression_data|>
  filter(Count > 1000 & pCR_status == "no_pCR") 




```

```{r, fig.height=6, fig.width=18}

group2|>
  ggplot(aes(x = Gene, y = Count, fill=Treatment))+
  geom_col()+
  theme(axis.text.x = element_text(angle = 60, size=8))

plot2 <- group1|>
  ggplot(aes(x = Gene, y = Count))+
  geom_col()+
  theme(axis.text.x = element_text(angle = 60, size=4))


```

```{r}
full_expression_data|>
  filter(Count ==0 & pCR_status == "pCR")
```
