---
title: "05_analysis_1"
format: html
editor: visual
---

1.  **Load the necessary packages**

    ```{r}
    library(DESeq2)
    library(tidyverse)
    library(dplyr)
    ```

2.  **Reshape full_expression_data**

    Because DESeq2 require a data frame of gene expression data, where the row represents genes and the column represents the samples. So, we need to reshape full_expression_data into that form. Also, we only need "Gene", "Sample", and "Count". After reshaping, set row names as gene names and then delete the "Gene" column.

    ```{r}
    GSE182951 <- full_expression_data |> 
                 select(Gene, Sample, Count) |> #These 3 columns are what we need
                 pivot_wider(names_from = Sample, values_from = Count) |> 
                 as.data.frame() |>
                 column_to_rownames(var = "Gene")
    ```

3.  **Differential expression analysis**

    We decided to analyze the difference between pre- and post treatment patients, under pathological complete response and non-pathological complete response. So, first, we need to split our data based on the two different response status and then compute the differential expressed genes between pre- and post treatment patients respectively.

    ```{r}
    ########################################################################################
    ## i) Group our dataset into pCR and non-pCR
    ########################################################################################
    GSE182951_pCR <- GSE182951 |> select(1:12) #First 12 samples are pCR
    GSE182951_nonpCR <- GSE182951 |> select(13:40) #Last 28 samples are non-pCR
    #--------------------------------------END----------------------------------------------


    ########################################################################################
    ## ii) For each dataset, create a data frame using column names. This data frame is 
    ## needed by DESeq()
    ########################################################################################
    col_pCR <- GSE182951_pCR |> colnames() |> as.data.frame()
    col_nonpCR <- GSE182951_nonpCR |> colnames() |> as.data.frame()
    #--------------------------------------END----------------------------------------------


    ########################################################################################
    ## iii) Extract differential expressed genes from pCR and non-pCR group, respectively
    ########################################################################################
    GSE182951_diffGenes_pCR_pre_post <- GSE182951_pCR |>
      #Create DESeq2 object
      DESeqDataSetFromMatrix(colData = col_pCR, ~factor(c(rep(c("pre", "post"), 6)))) |>
      #Performing differential expression analysis
      DESeq() |>
      #Set significant level as 0.05 and extract the result
      results(alpha = 0.05) |>
      as_tibble(rownames = "Gene") |>
      #Extract those genes with log2FoldChange larger than 1 or smaller than -1
      filter(log2FoldChange > 1 | log2FoldChange < -1) |> 
      select(Gene)

    GSE182951_diffGenes_nonpCR_pre_post <- GSE182951_nonpCR |>
      DESeqDataSetFromMatrix(colData = col_nonpCR, ~factor(c(rep(c("pre", "post"), 14)))) |>
      DESeq() |>
      results(alpha = 0.05) |>
      as_tibble(rownames = "Gene") |>
      filter(log2FoldChange > 1 | log2FoldChange < -1) |> 
      select(Gene)
    #--------------------------------------END----------------------------------------------


    ########################################################################################
    ## iv) Save our diff genes as RData file and store them in data folder
    ########################################################################################
    save(GSE182951_diffGenes_pCR_pre_post, file = "../data/GSE182951_diffGenes_pCR_pre_post.RData")

    save(GSE182951_diffGenes_nonpCR_pre_post, file = "../data/GSE182951_diffGenes_nonpCR_pre_post.RData")
    #--------------------------------------END----------------------------------------------
    ```

4.  **Visualization for differentiate expression genes**

```{r}
#Order the log2 fold change value for obtaining upregulated and downregulated genes
GSE182951_diff_pCR_pre_post <- GSE182951_diff_pCR_pre_post[order(GSE182951_diff_pCR_pre_post$log2FoldChange), ]
GSE182951_diff_nonpCR_pre_post <- GSE182951_diff_nonpCR_pre_post[order(GSE182951_diff_nonpCR_pre_post$log2FoldChange), ]

#Group samples into pre-treatment and post-treatment for pCR and non-pCR respectively
GSE182951_pCR_for_heatmap <- cbind(GSE182951_pCR[, c(1,3,5,7,9,11)], GSE182951_pCR[, c(2,4,6,8,10,12)])
GSE182951_non_pCR_for_heatmap <- cbind(GSE182951_non_pCR[, c(1,3,5,7,9,11,13,15,17,19,21,23,25,27)],
                                       GSE182951_non_pCR[, c(2,4,6,8,10,12,14,16,18,20,22,24,26,28)])

#Repeat the process choosing differentiates expression genes (no difference from the previous, but in an order of log2 fold change from low to high)
GSE182951_diff_pCR_pre_post_genes <- rownames(filter(GSE182951_diff_pCR_pre_post, log2FoldChange < -1 | log2FoldChange > 1))
GSE182951_diff_nonpCR_pre_post_genes <- rownames(filter(GSE182951_diff_nonpCR_pre_post, log2FoldChange < -1 | log2FoldChange > 1))

#Get index of differentiate expression data for reshaping expression data
ordered_gene_pos_pCR <- match(GSE182951_diff_pCR_pre_post_genes, rownames(GSE182951_pCR_for_heatmap))
ordered_gene_pos_non_pCR <- match(GSE182951_diff_nonpCR_pre_post_genes, rownames(GSE182951_non_pCR_for_heatmap))

#Prepare datasets for heatmap, i.e., datasets with ordered genes (log2 fold change from low to #high)
GSE182951_pCR_for_heatmap <- GSE182951_pCR_for_heatmap[ordered_gene_pos_pCR, ]
GSE182951_non_pCR_for_heatmap <- GSE182951_non_pCR_for_heatmap[ordered_gene_pos_non_pCR, ]

GSE182951_pCR_for_heatmap$gene <- rownames(GSE182951_pCR_for_heatmap)
GSE182951_pCR_for_heatmap_long <- melt(GSE182951_pCR_for_heatmap, id.vars = "gene", measure.vars = colnames(GSE182951_pCR_for_heatmap)[1:12])

#Plot heatmap
ggplot(GSE182951_pCR_for_heatmap_long, aes(x = variable, y = gene)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", na.value = "gray") +
  labs(title = "Gene Expression Heatmap (Thresholded)", x = "Samples", y = "Genes") +
  theme_minimal()

```
